@page "/page/RegistroInspeccionDet"
@inject IInspeccionService _inspeccionServicio
@inject ITipoInspeccionService _tipoinspeccionServicio
@inject IAreaService _areaServicio
@inject ITrabajadorService _trabajadorServicio
@inject ITrabajadorService _jefeareaServicio
@inject IDialogService _dialogService
@inject IPlantillaService _plantillaServicio

@inject SweetAlertService Swal;

@inject NavigationManager _navigationManager
@inject ISnackbar _snackBar

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">

    <MudPaper Elevation="3" Class="pa-4" Width="100%">

        <MudText Typo="Typo.h5" GutterBottom="true"> </MudText>

        <MudGrid>

            <MudItem xs="12" sm="3">
                <MudSelect Label="Tipo Inspeccion" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" Class="mb-1"
                @bind-Value="_tipoSeleccionado ">
                    @if (listaTipoInspeccion.Any())
                    {
                        foreach (var tipo in listaTipoInspeccion)
                        {
                            <MudSelectItem Value="@tipo">@tipo.Descripcion</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="12" sm="3">
                <MudSelect T="string" Label="Area" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" Class="mb-1"
                           ValueChanged="ObtenerPlantilla">
                    @if (listaAreas.Any())
                    {
                        foreach (var area in listaAreas)
                        {
                            <MudSelectItem T="string" Value="@area.IdArea.ToString()">@area.DescArea</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>


            <MudItem xs="12" sm="6">
                <MudAutocomplete T="TrabajadorDTO" Label="Buscar Supervisor" @bind-Value="_trabajadorSeleccionado" SearchFunc="@BuscarTrabajador"
                                 ResetValueOnEmptyText="true"
                                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                 Variant="Variant.Outlined" Margin="Margin.Dense"
                                 Disabled="vDisabledIngresos"
                                 ToStringFunc="@(e => e == null ? null : $"{e.NombreApellido}")" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudAutocomplete T="TrabajadorDTO" Label="Buscar Jefe de area" @bind-Value="_jefeareaSeleccionado" SearchFunc="@BuscarJefes"
                                 ResetValueOnEmptyText="true"
                                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                 Variant="Variant.Outlined" Margin="Margin.Dense"
                                 Disabled="vDisabledIngresos"
                                 ToStringFunc="@(e => e == null ? null : $"{e.NombreApellido}")" />
            </MudItem>

            <MudItem xs="12" sm="3">
                <MudDatePicker Label="Fecha" Margin="Margin.Dense" Variant="Variant.Outlined" Class="d-block" @bind-Date="_inspeccion.Fecha" Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" />
            </MudItem>


        </MudGrid>

    </MudPaper>

    <br />
    <MudPaper Elevation="3" Class="pa-4" Width="100%">

        <MudItem xs="12">
            <MudTable Items="@_plantilla.PlantillaDets"
                      Striped="true" Bordered="true" Dense="true"
                      Filter="new Func<PlantillaDetDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem2"
                      Loading="@_loading" LoadingProgressColor="Color.Info"
                      GroupBy="@_groupDefinition">
                <ColGroup>
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                </ColGroup>

                <ToolBarContent>
                    <MudTextField @bind-Value="searchString1" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<PlantillaDetDTO, object>(x=>x.NroOrden)">Orden</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<PlantillaDetDTO, object>(x=>x.IdPlantilla)">SubCategoria</MudTableSortLabel></MudTh>
                    <MudTh>Realizado</MudTh>
                    <MudTh>Imagen</MudTh>
                    <MudTh></MudTh>
                    <MudTh>Observacion</MudTh>
                </HeaderContent>
                <GroupHeaderTemplate>
                    <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{context.GroupName}: {context.Key}")</MudTh>
                    </GroupHeaderTemplate>
                <RowTemplate Context="registroRow">

                    <MudTd DataLabel="Nro">@registroRow.NroOrden</MudTd>
                    <MudTd DataLabel="SubCategoria">@registroRow.SubCategoria</MudTd>

                    <MudTd>
                        <MudRadioGroup @bind-SelectedOption="@registroRow.Estado">
                            <MudRadio Option="@("0")" Color="Color.Primary">No</MudRadio>
                            <MudRadio Option="@("1")" Color="Color.Secondary">Si</MudRadio>
                            <MudRadio Option="@("2")">NA</MudRadio>
                        </MudRadioGroup>
                    </MudTd>
                 
                    <MudTd>
                       
                        <InputFile id="fileInput" OnChange="UploadFilesDTO" hidden multiple />
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Success"
                                   StartIcon="@Icons.Filled.CloudUpload"
                                   for="fileInput"
                                   OnClick="@(()=> EditarRegistro(registroRow))">
                        </MudButton>
                    </MudTd>
                    <MudTd DataLabel="Image">
                        @if (registroRow.SaveFile != null)
                        {
                            <MudPaper Class="pa-2 mx-2">
                                <img width="50" height="50" src="@($"data:{registroRow.SaveFile.Files.FileType};base64,{Convert.ToBase64String(registroRow.SaveFile.Files.ImageBytes)}")">
                                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@(_ => RemoveImg(registroRow.IdPlantillaDet))" aria-label="delete"></MudIconButton>
                            </MudPaper>
                        }
                    </MudTd>
                    <MudTd DataLabel="Observaciones">
                        @registroRow.Observacion
                    </MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudTablePager />
                </PagerContent>

            </MudTable>

        </MudItem>
        
    </MudPaper>
<br />
    <MudButton Variant="Variant.Filled" Disabled="@disableButton" Color="Color.Primary" OnClick="Validar">Validar</MudButton>
</MudContainer>

@code {

    [Parameter] public int codigoInspeccion { get; set; }
    [Parameter] public int estadoRegistro { get; set; }

    private TableGroupDefinition<PlantillaDetDTO> _groupDefinition = new()
        {
            GroupName = "Categoria",
            Indentation = false,
            Expandable = false,
            Selector = (e) => e.Categoria
        };

    private string searchString1 = "";

    private bool _loading = true;

    int vEstado=1;

    public AreaDTO _area { get; set; } = new AreaDTO();

    public TipoInspeccionDTO _tipo { get; set; } = new TipoInspeccionDTO();

    public TrabajadorDTO _trabajador { get; set; } = new TrabajadorDTO();

    List<InspeccionDetDTO> listaDetalles = new List<InspeccionDetDTO>();

    CreacionDTO _creacion = new CreacionDTO()
        {
            Inspeccions = new List<InspeccionDTO>()
        };

    InspeccionDTO _inspeccion = new InspeccionDTO()
        {
            InspeccionDets = new List<InspeccionDetDTO>()
        };


    PlantillaDTO _plantilla = new PlantillaDTO()
        {
            PlantillaDets = new List<PlantillaDetDTO>()
        };

    InspeccionDetDTO selectedItem1 = null;

    PlantillaDetDTO selectedItem2 = null;

    int vEdit = 0;
    string myImageClass { get; set; } = "d-none";
    bool disableButton = false, desabilitaUser = false, vDisabledIngresos = false;




    SaveFile saveFile = new SaveFile();
    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        int conta = 0;
        foreach (var file in e.GetMultipleFiles())
        {
            if (conta==0)
            {
                var fileData = new FileData();
                var buffers = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(buffers);
                fileData.FileName = file.Name;
                fileData.FileSize = file.Size;

                fileData.FileType = file.ContentType;
                fileData.ImageBytes = buffers;
                saveFile.Files.Add(fileData);
                var modeloPlantilla = _plantilla.PlantillaDets.Where(x => x.IdPlantillaDet == _idPlantillaDet).First();
                modeloPlantilla.RutaImagen = file.Name;
                //modeloPlantilla.Imagen = fileData.ImageBytes();
                modeloPlantilla.Imagen = buffers;

                saveFile.Files.Clear();
            }

        }
    }


    private async Task UploadFilesDTO(InputFileChangeEventArgs e)
    {
        int conta = 0;
        foreach (var file in e.GetMultipleFiles())
        {
            if (conta==0)
            {
                SaveFileDTO saveFileDTO = new SaveFileDTO();
                var modeloPlantilla = _plantilla.PlantillaDets.Where(x => x.IdPlantillaDet == _idPlantillaDet).First();

                var fileData = new FileDataDTO();
                var buffers = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(buffers);
                fileData.FileName = file.Name;
                fileData.FileSize = file.Size;

                fileData.FileType = file.ContentType;
                fileData.ImageBytes = buffers;

                saveFileDTO.Files = fileData;
                modeloPlantilla.RutaImagen = file.Name;
                modeloPlantilla.SaveFile = saveFileDTO;

                conta += 1;
            }

        }

    }


    private void RemoveImg(int codigoPlanillaDet)
    {
        //save.Files.Remove(file);
        var modeloPlantilla = _plantilla.PlantillaDets.Where(x => x.IdPlantillaDet == codigoPlanillaDet).First();
        modeloPlantilla.SaveFile = null;
    }

    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(IBrowserFile file)
    {

        files.Add(file);
        var modeloPlantilla = _plantilla.PlantillaDets.Where(x => x.IdPlantillaDet == _idPlantillaDet).First();
        modeloPlantilla.RutaImagen = file.Name;
        //TODO upload the files to the server
    }

    //private void UploadFiles(InputFileChangeEventArgs args)
    //{
    //    files.Add(args.File);
    //    //TODO upload the files to the server
    //}

    //IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles2(IBrowserFile file)
    {
        files.Add(file);
        //TODO upload the files to the server
    }

    private void Validar()
    {
        string prueba = "";
        foreach (var data in _plantilla.PlantillaDets)
        {
            prueba += data.Imagen;
        }
    }

    //cargar listas
    protected override async Task OnInitializedAsync()
    {
        _loading = false;

        ObtenerTipoInspeccion();


        // validamos si es mayor a cero editamos o mostramos de lo contrario es nueva
        //if (codigoInspeccion > 0)
        //{
        //    ObtenerPlantilla();

        //}

        ObtenerAreas();
        //  StateHasChanged();
    }



    private async Task ObtenerPlantilla(string codigoArea)
    {
        var result = await _plantillaServicio.Lista(int.Parse(codigoArea),1);

        if (result.status)
        {
            _plantilla = result.value.FirstOrDefault()!;

            _plantilla.PlantillaDets.Clear();
            List<PlantillaDetDTO> listaPlantillaDetalles = new List<PlantillaDetDTO>();
            var resultado3 = await _plantillaServicio.ListaDetalles(_plantilla.IdPlantilla);
            listaPlantillaDetalles = resultado3.value;

            foreach (var data in listaPlantillaDetalles)
            {
                data.Estado = "1";
                _plantilla.PlantillaDets.Add(data);
            }
            StateHasChanged();
        }
    }



    private bool FilterFunc1(PlantillaDetDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(PlantillaDetDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Categoria.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.SubCategoria.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    }


    //listar area

    List<AreaDTO> listaAreas = new List<AreaDTO>();
    private AreaDTO _areaSeleccionado;


    private async Task ObtenerAreas()
    {
        var response = await _areaServicio.Lista();

        if (response.status)
        {

            listaAreas = response.value!;
            if (_inspeccion.IdArea != 0)
            {
                _areaSeleccionado = listaAreas.FirstOrDefault(x => x.IdArea == _inspeccion.IdArea);
                StateHasChanged();

            }
            else
            {
                _areaSeleccionado = listaAreas.First();
            }
            StateHasChanged();
        }
    }

    //listar tipos de inspeccion

    List<TipoInspeccionDTO> listaTipoInspeccion = new List<TipoInspeccionDTO>();
    private TipoInspeccionDTO _tipoSeleccionado;


    private async Task ObtenerTipoInspeccion()
    {
        var response = await _tipoinspeccionServicio.Lista();

        if (response.status)
        {

            listaTipoInspeccion = response.value!;
            if (_inspeccion.IdTpoInsp != 0)
            {
                _tipoSeleccionado = listaTipoInspeccion.FirstOrDefault(x => x.IdTpoInsp == _inspeccion.IdTpoInsp);
                StateHasChanged();

            }
            else
            {
                _tipoSeleccionado = listaTipoInspeccion.First();
            }
            StateHasChanged();
        }
    }

    //listar trabajadores

    List<TrabajadorDTO> listaTrabajadores = new List<TrabajadorDTO>();
    private TrabajadorDTO _trabajadorSeleccionado;


    private async Task<IEnumerable<TrabajadorDTO>> BuscarTrabajador(string valor)
    {
        var response = await _trabajadorServicio.Lista();

        if (response.status)
        {
            if (string.IsNullOrEmpty(valor))
                return new List<TrabajadorDTO>();

            List<TrabajadorDTO> lista = (List<TrabajadorDTO>)response.value!;

            return lista.FindAll(p => p.NomTraba.Contains(valor, StringComparison.InvariantCultureIgnoreCase) || p.ApeTraba.Contains(valor, StringComparison.InvariantCultureIgnoreCase));

        }
        else
        {
            return new List<TrabajadorDTO>();
        }
    }

    //listar supervidores

    List<TrabajadorDTO> listaJefeArea = new List<TrabajadorDTO>();
    private TrabajadorDTO _jefeareaSeleccionado;


    private async Task<IEnumerable<TrabajadorDTO>> BuscarJefes(string valor)
    {
        var response = await _jefeareaServicio.Lista();

        if (response.status)
        {
            if (string.IsNullOrEmpty(valor))
                return new List<TrabajadorDTO>();

            List<TrabajadorDTO> lista = (List<TrabajadorDTO>)response.value!;

            return lista.FindAll(p => p.NomTraba.Contains(valor, StringComparison.InvariantCultureIgnoreCase) || p.ApeTraba.Contains(valor, StringComparison.InvariantCultureIgnoreCase));

        }
        else
        {
            return new List<TrabajadorDTO>();
        }
    }


    //Volver al listado de plantilla

    private void LlamarCabecera()
    {
        _navigationManager.NavigateTo("/page/inspeccion");
    }

    //Guardar
    private async Task Guardar()
    {
        if (validarDatos())
        {
            myImageClass = "d-block";
            disableButton = true;

            string _mensaje = "";
            bool _resultado;


            _inspeccion.IdArea = _areaSeleccionado.IdArea;
            // _plantilla.IdCreate = 0;

            _creacion.Inspeccions!.Add(_inspeccion);


            if (_inspeccion.IdCreate != null)
            {
                _creacion.IdCreate = _inspeccion.IdCreate ?? default(int);
                _creacion.PcModi = Environment.MachineName;
                _creacion.UsuaModi = appData.usuarioLogin;

                _resultado = await _inspeccionServicio.Editar(_creacion);
                _mensaje = "Registro fue modificado";
            }
            else
            {
                _creacion.Activo = 1;
                _creacion.PcCrea = Environment.MachineName;
                _creacion.UsuaCrea = appData.usuarioLogin;

                var response = await _inspeccionServicio.Crear(_creacion);
                _resultado = response.status;
                _mensaje = "Registro fue creado";
            }


            if (_resultado)
            {
                _snackBar.Add(_mensaje, Severity.Success, a => a.VisibleStateDuration = 500);
            }
            else
            {
                _snackBar.Add("Error al guardar cambios, al parecer hubo unos problemas al momento de grabar...", Severity.Error, a => a.VisibleStateDuration = 500);
                disableButton = false;
                myImageClass = "d-none";
            }
        }
    }

    private void Mensaje(string _mensaje)
    {
        var parameters = new DialogParameters<MsMensaje>();
        parameters.Add(x => x.ContentText, _mensaje);
        parameters.Add(x => x.ButtonText, "Cerrar");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        _dialogService.Show<MsMensaje>("Delete", parameters, options);
    }


    private bool validarDatos()
    {

        if (_areaSeleccionado.IdArea > 0 && _areaSeleccionado != null)
        {
            if (!string.IsNullOrEmpty(_inspeccion.Inspeccion))
            {
                return true;
            }
            else
            {
                Mensaje("1. Ingrese tipo de inspeccion...");
                return false;
            }
        }
        else
        {
            Mensaje("2. Falta seleccionar el area...");
            return false;
        }


    }


    int _idPlantillaDet = 0;
    //Editar Registro
    private void EditarRegistro(PlantillaDetDTO model)
    {
        //if(files!=null)
        //{
        //    model.RutaImagen = files.FirstOrDefault().Name;
        //files.Clear();
        //}
        _idPlantillaDet = model.IdPlantillaDet;
    }

}
