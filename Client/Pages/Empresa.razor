@page "/page/empresa"
@inject IEmpresaService _empresaServicio
@inject ISnackbar _snackBar
@inject NavigationManager _navigationManager

<AuthorizeView Roles="Administrador,Supervisor,Logistica,Vendedor">
    <NotAuthorized>
        @{
            _snackBar.Add("Acceso no autorizado...", Severity.Error, a => a.VisibleStateDuration = 500);
            _navigationManager.NavigateTo("/");

        }
    </NotAuthorized>
</AuthorizeView>
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">
    <MudPaper Elevation="3" Class="pa-4" Width="100%">
        <MudText Typo="Typo.h5" GutterBottom="true">Datos Empresa</MudText>
        <MudGrid>
            <MudItem xs="12" sm="12">
                <MudTextField @bind-Value="@_empresa.RazEmp" Class="mb-3"
                              Label="Empresa" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Fax" />
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem xs="12" sm="4">
                <MudTextField @bind-Value="@_empresa.RucEmp" Class="mb-3"
                              Label="Ruc" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Badge" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField @bind-Value="@_empresa.NroTelefono" Class="mb-3"
                              Label="Telefono" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Call" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField @bind-Value="@_empresa.CorreoEmp" Class="mb-3"
                              Label="Correo" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Mail" />
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem xs="12" sm="8">
                <MudTextField @bind-Value="@_empresa.DirecEmp" Class="mb-3"
                              Label="Direccion" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Place" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField @bind-Value="@_empresa.DistEmp" Class="mb-3"
                              Label="Distrito" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Festival" />
            </MudItem>
        </MudGrid>

        <MudGrid>
            <MudItem xs="12" sm="4">
                <MudTextField @bind-Value="@_empresa.ProvEmp" Class="mb-3"
                              Label="Provincia" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.LocationCity" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField @bind-Value="@_empresa.DptEmp" Class="mb-3"
                              Label="Departamento" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.AssistantPhoto" />
            </MudItem>
          
        </MudGrid>
    </MudPaper>
    <br /><br />
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="@(myImageClass + " my-7")" />
    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Cerrar">Cerrar</MudButton>&nbsp;
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@disableButton" OnClick="GuardarEmpresa">Guardar</MudButton>

</MudContainer>

@code {


    List<EmpresaDTO> listaEmpresa = new List<EmpresaDTO>();
    public EmpresaDTO _empresa = new EmpresaDTO();

    string myImageClass { get; set; } = "d-none";
    bool disableButton = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var resultado = await _empresaServicio.Lista();

            if (resultado.status)
            {
                listaEmpresa = resultado.value!;
                if (listaEmpresa != null)
                {
                    if (listaEmpresa.Count() > 0)
                    {
                        _empresa = listaEmpresa.First();
                    }
                }


            }
        }
        catch (Exception)
        {
            _snackBar.Add("Bienvenido al sistema...", Severity.Warning, a => a.VisibleStateDuration = 500);
        }




    }

    private void Cerrar()
    {

        _navigationManager.NavigateTo("/page/dashboard");

    }
    private async Task GuardarEmpresa()
    {
        if (validarDatos())
        {
            myImageClass = "d-block";
            disableButton = true;

            string _mensaje = "";
            bool _resultado;


            if (_empresa.IdEmp != 0)
            {

                _resultado = await _empresaServicio.Editar(_empresa);
                _mensaje = "Empresa fue modificado";

            }
            else
            {

                var response = await _empresaServicio.Crear(_empresa);

                _resultado = response.status;
                _mensaje = "Empresa fue creado";
            }

            if (_resultado)
            {
                _snackBar.Add(_mensaje, Severity.Success, a => a.VisibleStateDuration = 500);
            }
            else
                _snackBar.Add("Error al guardar cambios", Severity.Error, a => a.VisibleStateDuration = 500);

            myImageClass = "d-none";
            disableButton = false;
        }


    }


    private bool validarDatos()
    {
        if (_empresa != null)
        {
            if (!string.IsNullOrEmpty(_empresa.RazEmp))
            {
                return true;
            }
            else
            {
                _snackBar.Add("1. Error al guardar cambios debe ingresar el nombre de la empresa", Severity.Error, a => a.VisibleStateDuration = 500);
                return false;

            }
        }
        else
        {
            _snackBar.Add("2. Error al guardar cambios", Severity.Error, a => a.VisibleStateDuration = 500);
            return false;

        }

    }

}
