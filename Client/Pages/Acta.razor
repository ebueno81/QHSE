@page "/page/acta"
@inject IActaService _actaServicio
@inject ICreacionService _creacionServicio
@inject IDialogService _dialogServicio
@inject ISnackbar _snackBar
@inject SweetAlertService Swal;
@inject IJSRuntime _jsServicio;

<AuthorizeView Roles="Administrador,Supervisor">
    <NotAuthorized>
        @{
            _snackBar.Add("Acceso no autorizado...", Severity.Error, a => a.VisibleStateDuration = 500);
            _navigationManager.NavigateTo("/");

        }
    </NotAuthorized>
</AuthorizeView>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">

    <MudText Typo="Typo.h5" GutterBottom="true">Actas  </MudText>

    <MudPaper Elevation="3" Class="pa-4" Width="100%">
        <MudGrid>
            <AuthorizeView Roles="Administrador,Supervisor">
                <Authorized>
                    <MudItem xs="12">
                        <MudButton Variant="Variant.Filled"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Color="Color.Primary"
                                   OnClick="AbrirNuevo">
                            Nueva Acta
                        </MudButton>
                    </MudItem>
                </Authorized>
            </AuthorizeView>

            <MudItem xs="12">

                <MudTable Items="@listaActas"
                          Striped="true" Bordered="true" Dense="true"
                          Filter="new Func<ActaDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1"
                          Loading="@_loading" LoadingProgressColor="Color.Info">
                    <ToolBarContent>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Codigo</MudTh>
                        <MudTh>Nro.Acta</MudTh>
                        <MudTh>Fecha</MudTh>
                        <MudTh>Observacion</MudTh>

                    </HeaderContent>
                    <RowTemplate Context="registroRow">
                        <MudTd DataLabel="Codigo">@registroRow.IdActa</MudTd>
                        <MudTd DataLabel="Nro.Acta">@registroRow.NroActa</MudTd>
                        <MudTd DataLabel="Fecha">@registroRow.FechaProg</MudTd>
                        <MudTd DataLabel="Observación">@registroRow.Obs</MudTd>

                        <MudTd DataLabel="">
                            <AuthorizeView Roles="Administrador,Supervisor">
                                <Authorized>
                                    <MudFab Color="Color.Primary"
                                            StartIcon="@Icons.Material.Filled.Edit"
                                            Size="Size.Small"
                                            IconSize="Size.Small"
                                            OnClick="@(() => AbrirEditar(registroRow))" />
                                </Authorized>
                            </AuthorizeView>
                            <AuthorizeView Roles="Administrador">
                                <Authorized>
                                    <MudFab Color="Color.Error"
                                            StartIcon="@Icons.Material.Filled.Delete"
                                            Size="Size.Small"
                                            IconSize="Size.Small"
                                            OnClick="@(() => Eliminar(registroRow))" />
                                </Authorized>
                            </AuthorizeView>
                            <MudFab Color="Color.Info"
                                    StartIcon="@Icons.Material.Filled.PictureAsPdf"
                                    Size="Size.Small"
                                    IconSize="Size.Small"
                                    OnClick="@(() => ImprimirPDF(registroRow.IdActa))" />
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>


            </MudItem>
        </MudGrid>
    </MudPaper>

</MudContainer>

@code {
    List<ActaDTO> listaActas = new List<ActaDTO>();


    private string searchString1 = "";
    private ActaDTO selectedItem1 = null;
    private bool _loading = true;

    private async Task ObtenerActas()
    {
        var result = await _actaServicio.Lista();

        if (result.status)
        {
            listaActas = (List<ActaDTO>)result.value!;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ObtenerActas();
            _loading = false;
        }
        catch (Exception)
        {

            _snackBar.Add("Acceso indebido...", Severity.Error, a => a.VisibleStateDuration = 500);
        }
    }

    private bool FilterFunc1(ActaDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(ActaDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.NroActa.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task AbrirNuevo()
    {
        var dialogo = _dialogServicio.Show<MdActa>("Nuevo Acta");
        var resultado = await dialogo.Result;

        if (!resultado.Canceled)
        {
            await ObtenerActas();
        }
    }

    private async Task AbrirEditar(ActaDTO model)
    {
        var parametros = new DialogParameters { ["_acta"] = model };

        var dialogo = _dialogServicio.Show<MdActa>("Editar Acta", parametros);
        var resultado = await dialogo.Result;

        if (!resultado.Canceled)
        {
            await ObtenerActas();
        }
    }

    private async Task Eliminar(ActaDTO model)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta seguro?",
                Text = $"Eliminar Acta: {model.NroActa}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, eliminar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)
        {
            CreacionDTO _creacion = new CreacionDTO();
            _creacion.IdCreate = model.IdCreate ?? default(int);
            _creacion.UsuaAnula = appData.usuarioLogin;
            _creacion.PcAnula = Environment.MachineName;


            var resultado = await _creacionServicio.Anular(_creacion);

            if (resultado)
            {
                _snackBar.Add("El registro fue eliminado", Severity.Success, a => a.VisibleStateDuration = 500);
                await ObtenerActas();
            }
            else
                _snackBar.Add("No se pudo eliminar", Severity.Error, a => a.VisibleStateDuration = 500);
        }
    }
    private async Task ImprimirPDF(int codigoActa)
    {
        string rutaUrl = $"{appData.urlReporte}api/acta/imprimirReporte?codigo={codigoActa}";
        _jsServicio.InvokeAsync<object>("open", rutaUrl, "_blank");
    }
}
