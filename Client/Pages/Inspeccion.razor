@page "/page/RegistroInspeccion"
@inject IInspeccionService _inspeccionServicio
@inject ICreacionService _creacionServicio
@inject IDialogService _dialogServicio
@inject ISnackbar _snackBar
@inject SweetAlertService Swal;
@inject IJSRuntime _jsServicio;
@using ClosedXML.Excel;

<AuthorizeView Roles="Administrador,Supervisor">
    <NotAuthorized>
        @{
            _snackBar.Add("Acceso no autorizado...", Severity.Error, a => a.VisibleStateDuration = 500);
            _navigationManager.NavigateTo("/");
        }
    </NotAuthorized>
</AuthorizeView>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">

    <MudText Typo="Typo.h5" GutterBottom="true">Listado de Inspecciones</MudText>

    <MudPaper Elevation="3" Class="pa-4" Width="100%">
        <MudGrid>
            <AuthorizeView Roles="Administrador,Supervisor">
                <Authorized>
                    <MudItem xs="12">
                        <MudButton Variant="Variant.Filled"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Color="Color.Primary"
                                   OnClick="LlamarDetalle">
                            Nueva Inspección
                        </MudButton>
                    </MudItem>
                </Authorized>
            </AuthorizeView>

            <MudItem xs="12">

                <MudTable Items="@listaInspeccion"
                          Striped="true" Bordered="true" Dense="true"
                          Filter="new Func<InspeccionDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1"
                          Loading="@_loading" LoadingProgressColor="Color.Info">
                    <ToolBarContent>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<InspeccionDTO, object>(x=>x.IdInsp)">Codigo</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<InspeccionDTO, object>(x=>x.Inspeccion)">Tipo</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<InspeccionDTO, object>(x=>x.Area)">Area</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<InspeccionDTO, object>(x=>x.NomSuper1)">Supervisor</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<InspeccionDTO, object>(x=>x.Fecha)">Fecha</MudTableSortLabel></MudTh>
                    </HeaderContent>

                    <RowTemplate Context="registroRow">

                        <MudTd DataLabel="Codigo">@registroRow.IdInsp</MudTd>
                        <MudTd DataLabel="Tipo">@registroRow.Inspeccion</MudTd>
                        <MudTd DataLabel="Area">@registroRow.Area</MudTd>
                        <MudTd DataLabel="Fecha">@registroRow.NomSuper1</MudTd>
                        <MudTd DataLabel="Supervisor">@registroRow.Fecha</MudTd>

                        <MudTd DataLabel="">
                            <MudFab Color="Color.Info"
                                    StartIcon="@Icons.Material.Filled.PictureAsPdf"
                                    Size="Size.Small"
                                    IconSize="Size.Small"
                                    OnClick="@(() => ImprimirPDF(registroRow.IdInsp,1))" />
                            <MudFab Color="Color.Warning"
                                    StartIcon="@Icons.Material.Filled.AccountTree"
                                    Size="Size.Small"
                                    IconSize="Size.Small"
                                    OnClick="@(() => ExportarExcel(registroRow.IdInsp))" />

                            <MudFab Color="Color.Tertiary"
                                    StartIcon="@Icons.Material.Filled.RemoveRedEye"
                                    Size="Size.Small"
                                    IconSize="Size.Small"
                                    OnClick="@(() => AbrirEditar(registroRow.IdInsp,0))" />
                            <AuthorizeView Roles="Administrador,Supervisor">
                                <Authorized>
                                    <MudFab Color="Color.Primary"
                                            StartIcon="@Icons.Material.Filled.Edit"
                                            Size="Size.Small"
                                            IconSize="Size.Small"
                                            OnClick="@(() => AbrirEditar(registroRow.IdInsp,1))" />
                                </Authorized>
                            </AuthorizeView>
                            <AuthorizeView Roles="Administrador,Supervisor">
                                <Authorized>
                                    <MudFab Color="Color.Warning"
                                            StartIcon="@Icons.Material.Filled.TwoWheeler"
                                            Size="Size.Small"
                                            IconSize="Size.Small"
                                            OnClick="@(() => AbrirEditar(registroRow.IdInsp,2))" />
                                </Authorized>
                            </AuthorizeView>
                            <AuthorizeView Roles="Administrador">
                                <Authorized>
                                    <MudFab Color="Color.Error"
                                            StartIcon="@Icons.Material.Filled.Delete"
                                            Size="Size.Small"
                                            IconSize="Size.Small"
                                            OnClick="@(() => Eliminar(registroRow))" />
                                </Authorized>
                            </AuthorizeView>

                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>

            </MudItem>
        </MudGrid>
    </MudPaper>

</MudContainer>
@code {

    List<InspeccionDTO> listaInspeccion = new List<InspeccionDTO>();
    List<InspeccionDetDTO> listaInspeccionDets = new List<InspeccionDetDTO>();

    private string searchString1 = "";
    private InspeccionDTO selectedItem1 = null;
    private bool _loading = true;

    private async Task ObtenerInspeccion()
    {
        var result = await _inspeccionServicio.Lista(0);

        if (result.status)
        {
            listaInspeccion = (List<InspeccionDTO>)result.value!;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await ObtenerInspeccion();
        _loading = false;

    }

    private bool FilterFunc1(InspeccionDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(InspeccionDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Area.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    }

    private async Task AbrirEditar(int codigoInspeccion, int estadoRegistro)
    {
        _navigationManager.NavigateTo("/page/RegistroInspeccionDet/" + codigoInspeccion+ "/" + estadoRegistro);
    }

    private async Task Eliminar(InspeccionDTO model)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta seguro?",
                Text = $"Eliminar Plantilla: {model.IdInsp}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, eliminar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)
        {
            CreacionDTO _creacion = new CreacionDTO();
            _creacion.IdCreate = model.IdCreate ?? default(int);
            _creacion.UsuaAnula = appData.usuarioLogin;
            _creacion.PcAnula = Environment.MachineName;

            var resultado = await _creacionServicio.Anular(_creacion);

            if (resultado)
            {
                _snackBar.Add("La inspección fue eliminado", Severity.Success, a => a.VisibleStateDuration = 500);
                await ObtenerInspeccion();
            }
            else
                _snackBar.Add("No se pudo eliminar", Severity.Error, a => a.VisibleStateDuration = 500);
        }
    }

    private void LlamarDetalle()
    {
        _navigationManager.NavigateTo("/page/RegistroInspeccionDet/0/1");
    }

    private async Task ImprimirPDF(int codigoInspeccion, int numVerificacion)
    {
        string rutaUrl = $"{appData.urlReporte}api/inspeccion/imprimirReporte?codigoInspeccion={codigoInspeccion}&numVerificacion={numVerificacion}";
        _jsServicio.InvokeAsync<object>("open", rutaUrl, "_blank");
    }

    private async Task ExportarExcel(int codigoPlantilla)
    {
        var result = await _inspeccionServicio.ListaDetalles(codigoPlantilla,1);

        if (result.status)
        {
            listaInspeccionDets = (List<InspeccionDetDTO>)result.value!;

            List<listaRegistros> tabla = new List<listaRegistros>();
            foreach (var data in listaInspeccionDets)
            {
                tabla.Add(new listaRegistros()
                    {
                        Area = data.Area,
                       // Descripcion = data.Descripcion,
                        IdCategoria = data.IdCtg,
                        Categoria = data.Categoria,
                        IdSubCategoria = data.IdSubCtg,
                        SubCategoria = data.SubCategoria

                    });
            };


            using (var libro = new XLWorkbook())
            {
                IXLWorksheet hoja = libro.Worksheets.Add("Inspeccion");

                hoja.Range("A1:K1").Style.Font.Bold = true;

                hoja.Cell(1, 1).Value = "Area";
                hoja.Cell(1, 2).Value = "Descripcion";
                hoja.Cell(1, 3).Value = "IdCategoria";
                hoja.Cell(1, 4).Value = "Categoria";
                hoja.Cell(1, 5).Value = "IdSubCategoria";
                hoja.Cell(1, 6).Value = "SubCategoria";
                hoja.Cell(1, 7).Value = "SI";
                hoja.Cell(1, 8).Value = "NO";
                hoja.Cell(1, 9).Value = "N/A";
                hoja.Cell(1, 10).Value = "Observaciones";

                hoja.Cell(2, 1).InsertData(tabla);

                hoja.Columns().AdjustToContents();


                using (var memoria = new MemoryStream())
                {
                    libro.SaveAs(memoria);

                    var nombreExcel = string.Concat("Reporte ", DateTime.Now.ToString(), ".xlsx");
                    await _jsServicio.GenerarArchivo(nombreExcel, memoria.ToArray());

                }
            }

        }





    }

    class listaRegistros
    {
        public string? Area { get; set; }
        public string? Descripcion { get; set; }
        public int? IdCategoria { get; set; }
        public string? Categoria { get; set; }
        public int? IdSubCategoria { get; set; }
        public string? SubCategoria { get; set; }

    }
}
