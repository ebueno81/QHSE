@page "/page/plantillaDetalle/{codigoPlantilla:int}/{estadoRegistro:int}"

@inject IPlantillaService _plantillaServicio
@inject IPlantillaDetService _plantillaDetServicio
@inject ICategoriaService _categoriaServicio
@inject ISubCategoriaService _subcategoriaServicio
@inject IAreaService _areaServicio
@inject IDialogService _dialogService
@inject SweetAlertService Swal;

@inject NavigationManager _navigationManager
@inject ISnackbar _snackBar

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">

    <MudPaper Elevation="3" Class="pa-4" Width="100%">

        <MudText Typo="Typo.h5" GutterBottom="true">Plantillas</MudText>

        <MudGrid>
                        
            <MudItem xs="12" sm="3">
                <MudSelect Label="Area" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" Class="mb-1"
                @bind-Value="_areaSeleccionado ">
                        @if (listaAreas.Any())
                        {
                            foreach (var area in listaAreas)
                            {
                                <MudSelectItem Value="@area">@area.DescArea</MudSelectItem>
                            }
                        } 
                </MudSelect>
            </MudItem>
                 
            <MudItem xs="12" sm="9">
                <MudTextField @bind-Value="@_plantilla.Descripcion" Class="mb-1"
                    Label="Descripción" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Badge" />
            </MudItem>

            @if (estadoRegistro != 0)
            {
                <MudItem xs="12" sm="3">
                    <MudSelect Label="Categoria" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" Disabled="vDisabledIngresos" ref="eSubCategoria"
                           @bind-Value="_categoriaSeleccionado">
                        @if (listaCategorias.Any())
                        {
                            foreach (var categoria in listaCategorias)
                            {
                                <MudSelectItem Value="@categoria">@categoria.DescCtg</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" sm="7">
                    <MudAutocomplete T="SubCategoriaDTO" Label="Buscar categorias" @bind-Value="_subcategoriaSeleccionado" SearchFunc="@BuscarSubCategoria"
                                 ResetValueOnEmptyText="true"
                                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                 Variant="Variant.Outlined" Margin="Margin.Dense"
                                 Disabled="vDisabledIngresos"
                                 ToStringFunc="@(e => e == null ? null : $"{e.DescSubCtg}")" />

                </MudItem>

                <MudItem xs="12" sm="2">
                    <MudTextField @bind-Value="@_nroOrden" Class="mb-3"
                              Label="Nro." Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Badge" />
                </MudItem>

                <MudItem xs="12" sm="3">
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" FullWidth="true" OnClick="AgregarRegistro">Aceptar</MudButton>
                </MudItem>
            }

        </MudGrid>

    </MudPaper>

    <br />

    <MudPaper Elevation="3" Class="pa-4" Width="100%">

         <MudItem xs="12">

            <MudTable Items="@_plantilla.PlantillaDets"
                    Striped="true" Bordered="true" Dense="true"
                    Filter="new Func<PlantillaDetDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1"
                    Loading="@_loading" LoadingProgressColor="Color.Info">

                   <ToolBarContent>
                   <MudTextField @bind-Value="searchString1" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                   </ToolBarContent>

                   <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<PlantillaDetDTO, object>(x=>x.NroOrden)">Orden</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<PlantillaDetDTO, object>(x=>x.Categoria)">Categoria</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<PlantillaDetDTO, object>(x=>x.IdPlantilla)">SubCategoria</MudTableSortLabel></MudTh>
                   </HeaderContent> 

                <RowTemplate Context="registroRow">

                    <MudTd DataLabel="Nro">@registroRow.NroOrden</MudTd>
                    <MudTd DataLabel="Categoria">@registroRow.Categoria</MudTd>
                    <MudTd DataLabel="SubCategoria">@registroRow.SubCategoria</MudTd>

                    <MudTd>
                        @if (estadoRegistro != 0)
                        {
                            <MudFab Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.Edit"
                            Size="Size.Small"
                            IconSize="Size.Small"
                                OnClick="@(()=> EditarRegistro(registroRow))" />
                            <MudFab Color="Color.Error"
                            StartIcon="@Icons.Material.Filled.Delete"
                            Size="Size.Small"
                            IconSize="Size.Small"
                                OnClick="@(() => EliminarSubCategoria(registroRow))" />
               }
                   </MudTd>
                </RowTemplate>

                <PagerContent>
                <MudTablePager />
                </PagerContent>

             </MudTable>

        </MudItem>

        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="@(myImageClass + " my-7")" />

        <br />
        <br />

        <div style="float:right">
            
            @if(estadoRegistro!=0)
            {
                <MudButton Variant="Variant.Filled" Disabled="@disableButton" Color="Color.Primary" OnClick="Guardar">Guardar</MudButton>
            }
            &nbsp;
            <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="LlamarCabecera">Cancelar</MudButton>
        </div>

        <br />
        <br />
    </MudPaper>

</MudContainer>

@code {
    [Parameter] public int codigoPlantilla { get; set; }
    [Parameter] public int estadoRegistro { get; set; }

    //[CascadingParameter]
    //MudDialogInstance MudDialog { get; set; }

    private string searchString1 = "";

    private bool _loading = true;

    public CategoriaDTO _categoria { get; set; } = new CategoriaDTO();

    PlantillaDetDTO _plantillaDets = new PlantillaDetDTO();

    public SubCategoriaDTO _subcategoria { get; set; } = new SubCategoriaDTO();

    public AreaDTO _area { get; set; } = new AreaDTO();

    List<PlantillaDetDTO> listaDetalles = new List<PlantillaDetDTO>();

    CreacionDTO _creacion = new CreacionDTO()
        {
            Plantillas = new List<PlantillaDTO>()
        };

    PlantillaDTO _plantilla = new PlantillaDTO()
        {
            PlantillaDets = new List<PlantillaDetDTO>()
        };

    PlantillaDetDTO selectedItem1 = null;

    int vEdit = 0;
    string myImageClass { get; set; } = "d-none";
    bool disableButton = false, desabilitaUser = false, vDisabledIngresos = false;
    string _nroOrden;
    ElementReference eSubCategoria;

    //cargar listas
    protected override async Task OnInitializedAsync()
    {
        _loading = false;

        ObtenerCategorias();



        // validamos si es mayor a cero editamos o mostramos de lo contrario es nueva plantilla
        if (codigoPlantilla>0)
        {
            ObtenerPlantilla();

        }

        ObtenerAreas();
        //  StateHasChanged();
    }



    private async Task ObtenerPlantilla()
    {
        var result = await _plantillaServicio.Lista(codigoPlantilla);

        if (result.status)
        {
            _plantilla = result.value.FirstOrDefault()!;

            _plantilla.PlantillaDets.Clear();
            List<PlantillaDetDTO> listaPlantillaDetalles = new List<PlantillaDetDTO>();
            var resultado3 = await _plantillaServicio.ListaDetalles(_plantilla.IdPlantilla);
            listaPlantillaDetalles = resultado3.value;

            foreach (var data in listaPlantillaDetalles)
            {
                _plantilla.PlantillaDets.Add(data);
            }
            StateHasChanged();
        }
    }

    //Listar Categorias
    List<CategoriaDTO> listaCategorias = new List<CategoriaDTO>();
    private CategoriaDTO _categoriaSeleccionado;

    private async Task ObtenerCategorias()
    {
        var response = await _categoriaServicio.Lista();

        if (response.status)
        {

            listaCategorias = response.value!;
            if (_categoria.IdCtg != 0)
            {
                _categoriaSeleccionado = listaCategorias.FirstOrDefault()!;

            }

        }
    }

    private bool FilterFunc1(PlantillaDetDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(PlantillaDetDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Categoria.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.SubCategoria.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    }

    List<SubCategoriaDTO> listaSubCategorias = new List<SubCategoriaDTO>();
    private SubCategoriaDTO _subcategoriaSeleccionado;

    private async Task<IEnumerable<SubCategoriaDTO>> BuscarSubCategoria(string valor)
    {

        var response = await _subcategoriaServicio.Lista();

        if (response.status)
        {
            if (string.IsNullOrEmpty(valor))
                return new List<SubCategoriaDTO>();

            List<SubCategoriaDTO> lista = (List<SubCategoriaDTO>)response.value!;

            var x = _categoriaSeleccionado.IdCtg;
            return lista.FindAll(p => p.DescSubCtg.Contains(valor, StringComparison.InvariantCultureIgnoreCase) && p.IdCtg==_categoriaSeleccionado.IdCtg);

        }
        else
        {
            return new List<SubCategoriaDTO>();
        }

    }

    //listar area

    List<AreaDTO> listaAreas = new List<AreaDTO>();
    private AreaDTO _areaSeleccionado;


    private async Task ObtenerAreas()
    {
        var response = await _areaServicio.Lista();

        if (response.status)
        {

            listaAreas= response.value!;
            if (_plantilla.IdArea != 0)
            {
                //_areaSeleccionado = listaAreas.FirstOrDefault()!;
                //var codigoArea = _plantilla.IdArea ?? default(int);
                _areaSeleccionado = listaAreas.FirstOrDefault(x => x.IdArea == _plantilla.IdArea);
                StateHasChanged();

            }
            else
            {
                _areaSeleccionado = listaAreas.First();
            }
            StateHasChanged();
        }
    }

    private async void Cambiar(string _categoriaCodigo)
    {
        //   _categoriaSeleccionado = listaCategorias.Where(x => x.IdCtg == int.Parse(_categoriaCodigo)).FirstOrDefault();
        var resultado = await _subcategoriaServicio.Lista();
        var resultadoLista = (List<SubCategoriaDTO>)resultado.value!;
        //        Buscar();
        listaSubCategorias = resultadoLista.Where(x => x.IdCtg == int.Parse(_categoriaCodigo)).ToList();

        StateHasChanged();
    }


    //Agregar Registro
    private void AgregarRegistro()
    {
        if (ValidarDetalles())
        {
            if (validarDuplicidad(_subcategoriaSeleccionado.IdSubCtg))
            {
                if (validarDuplicidadNroOrden(_nroOrden))
                {
                    // editamos item
                    if (vEdit == 1)
                    {
                        var productoEliminar = _plantilla.PlantillaDets.Find(p => p.IdSubCtg == _subcategoriaSeleccionado.IdSubCtg);
                        productoEliminar.IdSubCtg = _subcategoriaSeleccionado.IdSubCtg;
                        productoEliminar.Categoria = _subcategoriaSeleccionado.Categoria;
                        productoEliminar.SubCategoria = _subcategoriaSeleccionado.DescSubCtg;
                        productoEliminar.NroOrden = _nroOrden;
                    }
                    else// registramos nuevo item
                    {
                        var plantillaDetalle = new PlantillaDetDTO()
                            {
                                IdPlantillaDet = 0,
                                IdCtg = _subcategoriaSeleccionado.IdCtg,
                                IdSubCtg = _subcategoriaSeleccionado.IdSubCtg,
                                Categoria = _subcategoriaSeleccionado.Categoria,
                                SubCategoria = _subcategoriaSeleccionado.DescSubCtg,
                                NroOrden = _nroOrden,
                                Activo = 1

                            };
                        _plantilla.PlantillaDets!.Add(plantillaDetalle);
                    }


                    vEdit = 0;
                    vDisabledIngresos = false;
                    _subcategoriaSeleccionado.IdSubCtg = 0;
                    _subcategoriaSeleccionado.DescSubCtg = "";
                    _nroOrden = "";
                }
            }
        }


    }

    private bool ValidarDetalles()
    {
        if (!string.IsNullOrEmpty(_nroOrden))
        {
            if (_subcategoriaSeleccionado != null && _categoriaSeleccionado != null)
            {
                if (!string.IsNullOrEmpty(_subcategoriaSeleccionado.DescSubCtg))
                {
                    return true;
                }
                else
                {
                    _snackBar.Add("1. Debe seleccionar la subcategoria", Severity.Error, a => a.VisibleStateDuration = 500);
                    return false;
                }
            }
            else
            {
                _snackBar.Add("2. Debe seleccionar la subcategoria", Severity.Error, a => a.VisibleStateDuration = 500);
                return false;
            }
        }
        else
        {
            _snackBar.Add("3. Falta ingresar el numero de orden", Severity.Error, a => a.VisibleStateDuration = 500);
            return false;
        }
    }

    //Volver al listado de plantilla
    private void LlamarCabecera()
    {

        _navigationManager.NavigateTo("/page/plantilla");

    }

    //Guardar
    private async Task Guardar()
    {
        if (validarDatos())
        {
            myImageClass = "d-block";
            disableButton = true;

            string _mensaje = "";
            bool _resultado;


            _plantilla.IdArea = _areaSeleccionado.IdArea;
           // _plantilla.IdCreate = 0;

            _creacion.Plantillas!.Add(_plantilla);


            if (_creacion.Plantillas.First().IdCreate!= 0)
            {
                _creacion.IdCreate = _plantilla.IdCreate ?? default(int);
                _creacion.PcModi = Environment.MachineName;
                _creacion.UsuaModi = appData.usuarioLogin;

                _resultado = await _plantillaServicio.Editar(_creacion);
                _mensaje = "Registro fue modificado";
            }
            else
            {
                

                _creacion.Activo = 1;
                _creacion.PcCrea = Environment.MachineName;
                _creacion.UsuaCrea = appData.usuarioLogin;

                var response = await _plantillaServicio.Crear(_creacion);
                _resultado = response.status;
                _mensaje = "Registro fue creado";
            }



            if (_resultado)
            {
                _snackBar.Add(_mensaje, Severity.Success, a => a.VisibleStateDuration = 500);
            }
            else
            {
                _snackBar.Add("Error al guardar cambios, al parecer hubo unos problemas al momento de grabar...", Severity.Error, a => a.VisibleStateDuration = 500);
                disableButton = false;
                myImageClass = "d-none";
            }
        }

    }

    private void Mensaje(string _mensaje)
    {
        var parameters = new DialogParameters<MsMensaje>();
        parameters.Add(x => x.ContentText, _mensaje);
        parameters.Add(x => x.ButtonText, "Cerrar");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        _dialogService.Show<MsMensaje>("Delete", parameters, options);
    }

    //validar que no se repite el area //
    private bool validarDuplicidad(int codigoSubCategoria)
    {
        int x = 0;
        // solo validaremos en caso sea un registro nuevo //
        if (vEdit==0)
        {
            foreach (var data in _plantilla.PlantillaDets)
            {
                if (data.IdSubCtg == codigoSubCategoria)
                {
                    x = x + 1;
                }
            }
        }


        if (x==1)
        {
            _snackBar.Add("SubCategoria ya existe, se esta duplicando", Severity.Error, a => a.VisibleStateDuration = 500);
            return false;   
        }
        else
        {
            return true;
        }

    }

    //validar que no se repite el area //
    private bool validarDuplicidadNroOrden(string nroOrden)
    {
        int x = 0;
        // solo validaremos en caso sea un registro nuevo //
        if (vEdit == 0)
        {
            foreach (var data in _plantilla.PlantillaDets)
            {
                if (data.NroOrden == nroOrden)
                {
                    x = x + 1;
                }
            }
        }


        if (x == 1)
        {
            _snackBar.Add("El numero de orden ya existe, se esta duplicando", Severity.Error, a => a.VisibleStateDuration = 500);
            return false;
        }
        else
        {
            return true;
        }

    }

    private bool validarDatos()
    {

        if (_areaSeleccionado.IdArea>0 && _areaSeleccionado !=null)
        {
            if (!string.IsNullOrEmpty(_plantilla.Descripcion))
            {
                if (_plantilla.PlantillaDets != null)
                {
                    return true;
                }
                else
                {
                    Mensaje("1. No existen registros seleccionados...");
                    return false;
                }
            }
            else
            {
                Mensaje("2. Ingrese descripción de la plantilla...");
                return false;
            }
        }
        else
        {
            Mensaje("3. Falta seleccionar el area...");
            return false;
        }


    }

    private async Task EliminarSubCategoria(PlantillaDetDTO model)
    {

        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Esta seguro? No se podra recuperar el registro",
                    Text = $"Eliminar la  SubCategoria: {model.SubCategoria}" ,
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Si, eliminar",
                    CancelButtonText = "No, volver"
                });

        if (result.IsConfirmed)
        {
            if (model.IdPlantillaDet>0)
            {
                PlantillaDetDTO _detallePlantilla = new PlantillaDetDTO();
                _detallePlantilla.IdPlantillaDet = model.IdPlantillaDet;// ?? default(int);
                _detallePlantilla.Activo = 0;
                
                
                var resultado = await _plantillaDetServicio.Anular(_detallePlantilla);

                if (resultado)
                {
                    _snackBar.Add("El registro fue eliminado", Severity.Success, a => a.VisibleStateDuration = 500);
                }
                else
                    _snackBar.Add("No se pudo eliminar", Severity.Error, a => a.VisibleStateDuration = 500);
            }
            _plantilla.PlantillaDets.Remove(model);
         
            
            
        }
        
       
    }

    //Editar Registro
    private void EditarRegistro(PlantillaDetDTO model)
    {
        _categoriaSeleccionado.IdCtg = model.IdCtg ?? default(int);
        _categoriaSeleccionado.DescCtg = model.Categoria;

        _subcategoriaSeleccionado.IdSubCtg = model.IdSubCtg ?? default(int);
        _subcategoriaSeleccionado.DescSubCtg = model.SubCategoria;
        _subcategoriaSeleccionado.Categoria = model.Categoria;
        _nroOrden = model.NroOrden;
        vEdit = 1;
        vDisabledIngresos = true;
    }

}
