@page "/page/RegistroInspeccionDet/{codigoInspeccion:int}/{estadoRegistro:int}"
@inject IInspeccionService _inspeccionServicio
@inject ITipoInspeccionService _tipoinspeccionServicio
@inject IAreaService _areaServicio
@inject ITrabajadorService _trabajadorServicio
@inject ITrabajadorService _jefeareaServicio
@inject IActaService _actaServicio
@inject IJSRuntime _jsServicio;
@inject IDialogService _dialogService

@inject IPlantillaService _plantillaServicio

@inject SweetAlertService Swal;

@inject NavigationManager _navigationManager
@inject ISnackbar _snackBar


@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Drawing
@using SixLabors.ImageSharp.Drawing.Processing
@using SixLabors.ImageSharp.Processing;
@using SixLabors.ImageSharp.Formats.Jpeg
@using SixLabors.Fonts
@using System.Net.Http
@using System.IO

@inject MudBlazor.IDialogService _DialogService

<AuthorizeView Roles="Administrador,Supervisor,Usuario">
    <NotAuthorized>
        @{
            _snackBar.Add("Acceso no autorizado...", Severity.Error, a => a.VisibleStateDuration = 500);
            _navigationManager.NavigateTo("/");

        }
    </NotAuthorized>
</AuthorizeView>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">

    @if(estadoRegistro>0)
    {
        @if(estadoRegistro==1)
        {
            <MudText Typo="Typo.h5" GutterBottom="true">Inspección Nro.1</MudText>
        }
        else
        {
            <MudText Typo="Typo.h5" GutterBottom="true">Inspección Nro.2</MudText>
        }
    }
    

    <MudPaper Elevation="3" Class="pa-4" Width="100%">

        <MudText Typo="Typo.h5" GutterBottom="true"> </MudText>

        <MudGrid>


            <MudItem xs="12" sm="2">
                @if(codigoInspeccion>0 && _actaSeleccionado != null)
                {

                    <MudTextField @bind-Value="@_actaSeleccionado.FechaProg" Class="mb-1" Disabled
                              Label="Area" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Badge" />
                }
                else
                {
                    <MudSelect Label="Fecha Acta" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" Class="mb-1"
                           @bind-Value="_actaSeleccionado" Disabled="vDisabledIngresos">
                        @if (listaActas.Any())
                        {
                            foreach (var data in listaActas)
                            {
                                <MudSelectItem Value="@data">@data.FechaProg</MudSelectItem>
                            }
                        }
                    </MudSelect>
                }
                
            </MudItem>

            <MudItem xs="12" sm="2">
                <MudSelect Label="Tipo Inspeccion" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" Class="mb-1"
                           @bind-Value="_tipoSeleccionado" Disabled="vDisabledIngresos">
                    @if (listaTipoInspeccion.Any())
                    {
                        foreach (var tipo in listaTipoInspeccion)
                        {
                            <MudSelectItem Value="@tipo">@tipo.Descripcion</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="12" sm="2">
                @if (codigoInspeccion>0)
                {
                    <MudTextField @bind-Value="@_inspeccion.Area" Class="mb-1" Disabled
                              Label="Area" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Badge" />
                }
                else
                {
                    <MudSelect T="string" Label="Area" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" Class="mb-1"
                           ValueChanged="ObtenerPlantilla">
                        @if (listaAreas.Any())
                        {
                            foreach (var area in listaAreas)
                            {
                                <MudSelectItem T="string" Value="@area.IdArea.ToString()">@area.DescArea</MudSelectItem>
                            }
                        }
                    </MudSelect>
                }
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudAutocomplete T="TrabajadorDTO" Label="Buscar Supervisor" @bind-Value="_trabajadorSeleccionado" SearchFunc="@BuscarTrabajador"
                                 ResetValueOnEmptyText="true"
                                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="MudBlazor.Color.Primary"
                                 Variant="Variant.Outlined" Margin="Margin.Dense"
                                 Disabled="vDisabledIngresos"
                                 ToStringFunc="@(e => e == null ? null : $"{e.NombreApellido}")" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudAutocomplete T="TrabajadorDTO" Label="Buscar Jefe de area" @bind-Value="_jefeareaSeleccionado" SearchFunc="@BuscarJefes"
                                 ResetValueOnEmptyText="true"
                                 AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="MudBlazor.Color.Primary"
                                 Variant="Variant.Outlined" Margin="Margin.Dense"
                                 Disabled="vDisabledIngresos"
                                 ToStringFunc="@(e => e == null ? null : $"{e.NombreApellido}")" />
            </MudItem>

            <MudItem xs="12" sm="3">
                <MudDatePicker Label="Fecha" Margin="Margin.Dense" Variant="Variant.Outlined" Class="d-block" @bind-Date="vFecha" Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy"
                               Disabled="vDisabledIngresos" />
            </MudItem>


        </MudGrid>

    </MudPaper>

    <br />

    <MudPaper Elevation="3" Class="pa-4" Width="100%">

        <MudItem xs="12">
            <MudTable Items="@_inspeccion.InspeccionDets" RowsPerPage="appData.nFilas"
                      Striped="true" Bordered="true" Dense="true"
                      Filter="new Func<InspeccionDetDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem2"
                      Loading="@_loading" LoadingProgressColor="MudBlazor.Color.Info"
                      GroupBy="@_groupDefinition">
                <ColGroup>
                    <col/>
                    <col/>
                    <col />
                    <col />
                    <col />
                    <col />
                </ColGroup>

                <ToolBarContent>
                    <MudTextField @bind-Value="searchString1" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh>Orden</MudTh>
                    <MudTh>Pregunta</MudTh>
                    <MudTh>Realizado</MudTh>
                    <MudTh>Imagen</MudTh>
                     @if(estadoRegistro != 0)
                     {
                         <MudTh></MudTh>
                     }
                    <MudTh>Observacion</MudTh>
                </HeaderContent>
                <GroupHeaderTemplate>
                    <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{context.Key}")</MudTh>
                    </GroupHeaderTemplate>
                <RowTemplate Context="registroRow">

                    <MudTd DataLabel="Nro">@registroRow.NroOrden</MudTd>
                    <MudTd DataLabel="SubCategoria">@registroRow.SubCategoria</MudTd>

                    <MudTd>
                        @if (estadoRegistro==0)
                        {
                            if(registroRow.OpcSelect1=="0")
                            {
                                 <MudTd DataLabel="Realizado">No</MudTd>
                            }
                            if(registroRow.OpcSelect1=="1")
                            {
                                 <MudTd DataLabel="Realizado">Si</MudTd>
                            }
                            if(registroRow.OpcSelect1=="2")
                            {
                                 <MudTd DataLabel="Realizado">NA</MudTd>
                            }
                        }
                        else
                        {
                            @if (estadoRegistro==2)
                            {
                                <MudRadioGroup @bind-SelectedOption="@registroRow.OpcSelect2">
                                    <MudRadio Option="@("1")" Color="MudBlazor.Color.Primary">Si</MudRadio>
                                    <MudRadio Option="@("0")" Color="MudBlazor.Color.Secondary">No</MudRadio>
                                    <MudRadio Option="@("2")">NA</MudRadio>
                                </MudRadioGroup>
                            }
                            else
                            {
                                <MudRadioGroup @bind-SelectedOption="@registroRow.OpcSelect1">
                                    <MudRadio Option="@("1")" Color="MudBlazor.Color.Primary">Si</MudRadio>
                                    <MudRadio Option="@("0")" Color="MudBlazor.Color.Secondary">No</MudRadio>
                                    <MudRadio Option="@("2")">NA</MudRadio>
                                </MudRadioGroup>
                            }
                        }
                        
                    </MudTd>
                 
                     @if(estadoRegistro != 0)
                    {
                        <MudTd>
                            <InputFile accept="image/png, image/gif, image/jpeg , image/jpg;capture=camera" id="fileInput" OnChange="UploadFilesDTO" hidden multiple />
                            <MudButton HtmlTag="label" style="width: 5%;"
                                Variant="Variant.Filled"
                                Color="MudBlazor.Color.Success"
                                StartIcon="@Icons.Filled.CloudUpload"
                                for="fileInput"
                                OnClick="@(()=> EditarRegistro(registroRow,1))">
                            </MudButton>
                            <MudButton HtmlTag="label" style="width: 5%;"
                                Variant="Variant.Filled"
                                Color="MudBlazor.Color.Error"
                                StartIcon="@Icons.Filled.CameraAlt"
                                   OnClick="@(() => AbrirCamara(registroRow))">
                            </MudButton>
                        </MudTd>
                    }
                       
                    @if (estadoRegistro == 2)
                    {
                        if (registroRow.Foto2 != null)
                        {
                            @if (registroRow.Foto2.Length > 0)
                            {
                                var imgSrc2 = "data:image/jpg;base64," + Convert.ToBase64String(registroRow.Foto2);
                                <MudTd DataLabel="Image">
                                    <img width="35" height="40" src="@imgSrc2" @onclick="(()=>AbrirImagen(registroRow,imgSrc2))" />
                                        @if(estadoRegistro != 0)
                                    {
                                        <MudIconButton Color="MudBlazor.Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@(_ => RemoveImg(registroRow.IdInspDet))" aria-label="delete"></MudIconButton>
                                    }
                                </MudTd>
                            }
                        }
                    }
                    else
                    {
                        if (registroRow.Foto1 != null)
                        {
                            @if (registroRow.Foto1.Length > 0)
                            {
                                var imgSrc2 = "data:image/jpg;base64," + Convert.ToBase64String(registroRow.Foto1);
                                <MudTd DataLabel="Image">
                                    <img width="35" height="40" src="@imgSrc2" @onclick="(()=>AbrirImagen(registroRow,imgSrc2))" />
                                    @if(estadoRegistro != 0)
                                    {
                                        <MudIconButton Color="MudBlazor.Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@(_ => RemoveImg(registroRow.IdInspDet))" aria-label="delete"></MudIconButton>
                                    }
                                    </MudTd>
                                }
                                else
                                {
                                    <MudTd DataLabel="Image">
                                        &nbsp;
                                    </MudTd>
                                }
                            }
                        else
                        {
                            <MudTd DataLabel="Image">
                                &nbsp;
                            </MudTd>
                        }
                    }
                    
                        
                 
                    <MudTd DataLabel="Observacion">
                         @if(estadoRegistro == 0)
                            {
                               @registroRow.Obs1
                            }
                        else
                        {
                            <MudButton HtmlTag="label" style="width: 5%;"
                                                               Variant="Variant.Filled"
                                                               Color="MudBlazor.Color.Success"
                                                               StartIcon="@Icons.Filled.DocumentScanner"
                                                               OnClick="@(()=> AbrirObservacion(registroRow))">
                                                        </MudButton>
                        }
                            
                    </MudTd>
                </RowTemplate>
                 
                <PagerContent>
                    <MudTablePager />
                </PagerContent>

            </MudTable>

        </MudItem>
        
    </MudPaper>
    

    <br />
    
    @if(estadoRegistro>0)
    {
        <MudButton Variant="Variant.Filled" Disabled="disableButton" Color="MudBlazor.Color.Primary" OnClick="Guardar">Grabar</MudButton>
    }
    &nbsp;&nbsp;
    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Success" Disabled="@disableButtonCancel" OnClick="LlamarCabecera">Cancelar</MudButton>
  
</MudContainer>

@code {
    [Parameter] public int codigoInspeccion { get; set; }
    [Parameter] public int estadoRegistro { get; set; }


    // variables that work only with photo taking
    bool encenderCamara = false;
    //private string captionText;
    private string frameUri;

    FontCollection collection = new FontCollection();
    FontFamily sansFamily;
    Font captionFont;


    private void AbrirImagen(InspeccionDetDTO model, string rutaImagen)
    {

        var parameters = new DialogParameters<MsImagen>();
        parameters.Add(x => x.rutaMandada, rutaImagen);
        parameters.Add(x => x.codigoMandado, "");
        parameters.Add(x => x.articuloMandado, model.SubCategoria);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium };

        _dialogService.Show<MsImagen>(model.SubCategoria, parameters, options);

    }

    private async Task AbrirObservacion(InspeccionDetDTO model)
    {
        var options = new MudBlazor.DialogOptions
            {
                CloseButton = true,
                DisableBackdropClick = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };
        var parameters = new DialogParameters<MdObservacion>();


        parameters.Add(x => x.codigoMandado, model.IdInspDet);

        if (estadoRegistro==1)
            parameters.Add(x => x.observacionMandado, model.Obs1);
        if (estadoRegistro==2)
            parameters.Add(x => x.observacionMandado, model.Obs2);

        var result = await this._DialogService.Show<MdObservacion>("Actualizar observaciones", parameters, options).Result;

        //validamos el resultado para actualizar
        if (result.Data != null)
        {
            var data1 = _inspeccion.InspeccionDets.Where(x => x.IdInspDet == model.IdInspDet).FirstOrDefault();

            if (estadoRegistro==1)
                data1.Obs1 = result.Data.ToString();
            if (estadoRegistro==2)
                data1.Obs2 = result.Data.ToString();
        }
    }

    private async Task AbrirCamara(InspeccionDetDTO model)
    {
        var options = new MudBlazor.DialogOptions
            {
                CloseButton = true,
                DisableBackdropClick = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = false
            };
        var parameters = new DialogParameters<MdCamara>();


        parameters.Add(x => x.model, model);
        parameters.Add(x => x.estadoRegistro, estadoRegistro);

        //   parameters.Add(x => x.codigoMandado, 0);

        var result = await this._DialogService.Show<MdCamara>("Tomar Foto", parameters, options).Result;

        ////validamos el resultado para actualizar
        if (result.Data != null)
        {

        }
    }

    private TableGroupDefinition<InspeccionDetDTO> _groupDefinition = new()
        {
            GroupName = "Categoria",
            Indentation = false,
            Expandable = false,
            Selector = (e) => e.Categoria
        };

    private string searchString1 = "";
    int vCodigoArea=0;

    private bool vDesactiva = false, vCargando = false, _loading = true;

    int vEstado=1, vAutorizado=0;

    public AreaDTO _area { get; set; } = new AreaDTO();

    public TipoInspeccionDTO _tipo { get; set; } = new TipoInspeccionDTO();

    public TrabajadorDTO _trabajador { get; set; } = new TrabajadorDTO();

    List<InspeccionDetDTO> listaDetalles = new List<InspeccionDetDTO>();

    CreacionDTO _creacion = new CreacionDTO()
        {
            Inspeccions = new List<InspeccionDTO>()
        };

    InspeccionDTO _inspeccion = new InspeccionDTO()
        {
            InspeccionDets = new List<InspeccionDetDTO>()
        };


    PlantillaDTO _plantilla = new PlantillaDTO()
        {
            PlantillaDets = new List<PlantillaDetDTO>()
        };

    InspeccionDetDTO selectedItem1 = null;

    InspeccionDetDTO selectedItem2 = null;

    int vEdit = 0;
    string myImageClass { get; set; } = "d-none";

    DateTime? vFecha = DateTime.Now;
    bool disableButton = false, disableButtonCancel = false, desabilitaUser = false, vDisabledIngresos = false;

    SaveFile saveFile = new SaveFile();
    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        int conta = 0;
        foreach (var file in e.GetMultipleFiles())
        {
            if (conta==0)
            {
                var fileData = new FileData();
                var buffers = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(buffers);
                fileData.FileName = file.Name;
                fileData.FileSize = file.Size;

                fileData.FileType = file.ContentType;
                fileData.ImageBytes = buffers;
                saveFile.Files.Add(fileData);
                var modeloPlantilla = _inspeccion.InspeccionDets.Where(x => x.IdInspDet== _idPlantillaDet).First();
                modeloPlantilla.RutaImagen = file.Name;
                modeloPlantilla.Foto1 = buffers;
                modeloPlantilla.Imagen = buffers;

                saveFile.Files.Clear();
            }

        }
    }

    private async Task UploadFilesDTO(InputFileChangeEventArgs e)
    {
        int conta = 0;

        foreach (var file in e.GetMultipleFiles())
        {
            if (conta==0)
            {
                SaveFileDTO saveFileDTO = new SaveFileDTO();
                var modeloPlantilla = _inspeccion.InspeccionDets.Where(x => x.IdInspDet == _idPlantillaDet).First();

                var fileData = new FileDataDTO();
                var buffers = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(buffers);
                fileData.FileName = file.Name;
                fileData.FileSize = file.Size;

                fileData.FileType = file.ContentType;
                fileData.ImageBytes = buffers;

                modeloPlantilla.Foto1 = null;
                saveFileDTO.Files = fileData;
                modeloPlantilla.RutaImagen = file.Name;
                modeloPlantilla.SaveFile = saveFileDTO;
                modeloPlantilla.Imagen = buffers;

                if (estadoRegistro==2)
                    modeloPlantilla.Foto2 = buffers;
                else
                    modeloPlantilla.Foto1 = buffers;

                conta += 1;
            }

        }

    }

    private void RemoveImg(int codigoInspeccionDet)
    {
        //save.Files.Remove(file);
        var modeloPlantilla = _inspeccion.InspeccionDets.Where(x => x.IdInspDet == codigoInspeccionDet).First();
        modeloPlantilla.SaveFile = null;
        modeloPlantilla.Imagen = null;

        if (estadoRegistro==2)
            modeloPlantilla.Foto2 = null;
        else
            modeloPlantilla.Foto1 = null;

    }

    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(IBrowserFile file)
    {

        files.Add(file);
        var modeloPlantilla = _inspeccion.InspeccionDets.Where(x => x.IdInspDet == _idPlantillaDet).First();
        modeloPlantilla.RutaImagen = file.Name;

        //TODO upload the files to the server
    }

    private void UploadFiles2(IBrowserFile file)
    {
        files.Add(file);
        //TODO upload the files to the server
    }

    private void Validar()
    {
        string prueba = "";
        foreach (var data in _inspeccion.InspeccionDets)
        {
            prueba += data.Imagen;
        }
    }

    //cargar listas
    protected override async Task OnInitializedAsync()
    {

        ObtenerAreas();
        ObtenerActa();
        ObtenerTipoInspeccion();

        if (codigoInspeccion>0)
        {
            ObtenerInspeccion();

            if (estadoRegistro == 0)
                vDisabledIngresos = true;
        }
        else
        {
            _loading = false;
        }


    }

    private async Task ObtenerInspeccion()
    {
        var resultC = await _inspeccionServicio.Lista(codigoInspeccion);

        if (resultC.status)
        {

            _inspeccion = resultC.value.First();
            vFecha = _inspeccion.Fecha ?? default(DateTime);
            vCodigoArea = _inspeccion.IdArea ?? default(int);

            var response = await _trabajadorServicio.Lista();
            if (estadoRegistro==2)
                _trabajadorSeleccionado = response.value.FirstOrDefault(x => x.IdTraba == _inspeccion.IdSuper2);            
            else
                _trabajadorSeleccionado = response.value.FirstOrDefault(x => x.IdTraba == _inspeccion.IdSuper1);            

            _jefeareaSeleccionado = response.value.FirstOrDefault(x => x.IdTraba == _inspeccion.IdJefeArea);

            _areaSeleccionado = listaAreas.FirstOrDefault(x => x.IdArea == _inspeccion.IdArea);
            _tipoSeleccionado = listaTipoInspeccion.FirstOrDefault(x => x.IdTpoInsp == _inspeccion.IdTpoInsp);
            _actaSeleccionado = listaActas.FirstOrDefault(x => x.IdActa == _inspeccion.IdActa);
            //    StateHasChanged();


        }

        var result = await _inspeccionServicio.ListaDetalles(codigoInspeccion,0, estadoRegistro);

        if (result.status)
        {

            _inspeccion.InspeccionDets = result.value;
            if (estadoRegistro==2)
            {
                foreach (var data in _inspeccion.InspeccionDets.Where(x=>x.OpcSelect1=="0"))
                {
                    data.OpcSelect2 = "1";
                }
            }

            myImageClass = "d-none";

            _loading = false;
            StateHasChanged();
        }
    }

    private async Task ObtenerPlantilla(string codigoArea)
    {
        var result = await _plantillaServicio.Lista(int.Parse(codigoArea),1);
        if (result.status)
        {
            _loading = true;
            StateHasChanged();
            _plantilla = result.value.FirstOrDefault()!;
            vCodigoArea = int.Parse(codigoArea);
            _inspeccion.InspeccionDets.Clear();
            List<PlantillaDetDTO> listaPlantillaDetalles = new List<PlantillaDetDTO>();
            var resultado3 = await _plantillaServicio.ListaDetalles(_plantilla.IdPlantilla);
            listaPlantillaDetalles = resultado3.value;

            foreach (var data in listaPlantillaDetalles)
            {

                var inspeccionDetalle = new InspeccionDetDTO()
                        {
                            SubCategoria = data.SubCategoria,
                            Categoria = data.Categoria,
                            IdSubCtg = data.IdSubCtg,
                            OpcSelect1 = "1",
                            NroOrden = data.NroOrden,
                            Activo = 1,
                            IdInspDet = data.IdPlantillaDet
                        };
                _inspeccion.InspeccionDets.Add(inspeccionDetalle);


            }

            //  UltimaInspeccion(_actaSeleccionado.IdActa, _areaSeleccionado.IdArea);
            List<InspeccionDetDTO> InspeccionDetsAnt = new List<InspeccionDetDTO>();

            var result3 = await _inspeccionServicio.ListaDetalles(_actaSeleccionado.IdActa, vCodigoArea, 3);

            if (result3.status)
            {

                InspeccionDetsAnt = result3.value!;

                foreach (var data in InspeccionDetsAnt)
                {
                    foreach (var data2 in _inspeccion.InspeccionDets)
                    {
                        if (data2 != null)
                        {
                            if (data2.IdSubCtg == data.IdSubCtg)
                            {
                                if (data.OpcSelect1 == "0")
                                {
                                    data2.Foto1 = data.Foto1;
                                    data2.OpcSelect1 = data.OpcSelect1;
                                    data2.Obs1 = data.Obs1;
                                }
                                else
                                {
                                    if (data.OpcSelect2 == "0")
                                    {
                                        data2.Foto1 = data.Foto2;
                                        data2.OpcSelect1 = data.OpcSelect2;
                                        data2.Obs1 = data.Obs2;
                                    }
                                    else
                                    {
                                        data2.Foto1 = data.Foto1;
                                        data2.OpcSelect1 = data.OpcSelect1;
                                        data2.Obs1 = data.Obs1;
                                    }
                                }

                            }
                        }
                    }

                }

            }
            _loading = false;
            StateHasChanged();
        }


    }



    private bool FilterFunc1(InspeccionDetDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(InspeccionDetDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Categoria.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.SubCategoria.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    }

    List<AreaDTO> listaAreas = new List<AreaDTO>();
    private AreaDTO _areaSeleccionado;

    private async Task ObtenerAreas()
    {
        var response = await _areaServicio.Lista();

        if (response.status)
        {

            listaAreas = response.value!;
            _areaSeleccionado = listaAreas.First();

        }
    }

    //listar tipos de inspeccion
    List<TipoInspeccionDTO> listaTipoInspeccion = new List<TipoInspeccionDTO>();
    private TipoInspeccionDTO _tipoSeleccionado;


    private async Task ObtenerTipoInspeccion()
    {
        var response = await _tipoinspeccionServicio.Lista();

        if (response.status)
        {

            listaTipoInspeccion = response.value!;
            _tipoSeleccionado = listaTipoInspeccion.First();

        }
    }

    //listar actas
    List<ActaDTO> listaActas = new List<ActaDTO>();
    private ActaDTO _actaSeleccionado;


    private async Task ObtenerActa()
    {
        var response = await _actaServicio.Lista();

        if (response.status)
        {

            listaActas = response.value!.Where(x=>x.Estado==0).ToList();

            _actaSeleccionado = listaActas.First();

        }
    }

    //listar trabajadores
    List<TrabajadorDTO> listaTrabajadores = new List<TrabajadorDTO>();
    private TrabajadorDTO _trabajadorSeleccionado;

    private async Task<IEnumerable<TrabajadorDTO>> BuscarTrabajador(string valor)
    {
        var response = await _trabajadorServicio.Lista();

        if (response.status)
        {
            if (string.IsNullOrEmpty(valor))
                return new List<TrabajadorDTO>();

            List<TrabajadorDTO> lista = (List<TrabajadorDTO>)response.value!;

            return lista.FindAll(p => p.NomTraba.Contains(valor, StringComparison.InvariantCultureIgnoreCase) || p.ApeTraba.Contains(valor, StringComparison.InvariantCultureIgnoreCase));

        }
        else
        {
            return new List<TrabajadorDTO>();
        }
    }

    //listar supervidores
    List<TrabajadorDTO> listaJefeArea = new List<TrabajadorDTO>();
    private TrabajadorDTO _jefeareaSeleccionado;

    private async Task<IEnumerable<TrabajadorDTO>> BuscarJefes(string valor)
    {
        var response = await _jefeareaServicio.Lista();

        if (response.status)
        {
            if (string.IsNullOrEmpty(valor))
                return new List<TrabajadorDTO>();

            List<TrabajadorDTO> lista = (List<TrabajadorDTO>)response.value!;

            return lista.FindAll(p => p.NomTraba.Contains(valor, StringComparison.InvariantCultureIgnoreCase) || p.ApeTraba.Contains(valor, StringComparison.InvariantCultureIgnoreCase));

        }
        else
        {
            return new List<TrabajadorDTO>();
        }
    }

    //Volver al listado de plantilla

    private void LlamarCabecera()
    {
        _navigationManager.NavigateTo("/page/RegistroInspeccion");
    }

    //Guardar
    private async Task Guardar()
    {
        if (validarDatos())
        {

            myImageClass = "d-block";
            disableButton = true;

            string _mensaje = "";
            bool _resultado;



            _inspeccion.IdTpoInsp = _tipoSeleccionado.IdTpoInsp;
            _inspeccion.IdJefeArea = _jefeareaSeleccionado.IdTraba;
            _inspeccion.NomJefeArea = _jefeareaSeleccionado.NombreApellido;
            _inspeccion.FirmaJefeArea = _jefeareaSeleccionado.Firma;
            _inspeccion.IdActa = _actaSeleccionado.IdActa;


            _inspeccion.Fecha = vFecha;

            _inspeccion.IdEmp = 1;


            //editar
            if (_inspeccion.IdCreate != null)
            {
                if (estadoRegistro == 1)
                {
                    _inspeccion.IdSuper1 = _trabajadorSeleccionado.IdTraba;
                    _inspeccion.NomSuper1 = _trabajadorSeleccionado.NombreApellido;
                }
                else
                {
                    _inspeccion.IdSuper2 = _trabajadorSeleccionado.IdTraba;
                    _inspeccion.NomSuper2 = _trabajadorSeleccionado.NombreApellido;
                }


                _creacion.Inspeccions.Clear();

                _creacion.Inspeccions!.Add(_inspeccion);

                _creacion.IdCreate = _inspeccion.IdCreate ?? default(int);
                _creacion.PcModi = Environment.MachineName;
                _creacion.UsuaModi = appData.usuarioLogin;

                _resultado = await _inspeccionServicio.Editar(_creacion);
                _mensaje = "Registro fue modificado";
            }
            else// nuevo
            {
                // limpiamos el codigo correlativo temporal de la inspeccion detalles //
                LimpiarDetalles();

                _inspeccion.IdArea = vCodigoArea;
                _inspeccion.IdSuper1 = _trabajadorSeleccionado.IdTraba;
                _creacion.Inspeccions!.Add(_inspeccion);

                _creacion.Activo = 1;
                _creacion.PcCrea = Environment.MachineName;
                _creacion.UsuaCrea = appData.usuarioLogin;

                var response = await _inspeccionServicio.Crear(_creacion);



                // resultado
                _creacion = response.value;
                _inspeccion.IdCreate = _creacion.IdCreate;
                _inspeccion.IdInsp = _creacion.Inspeccions.First().IdInsp;
                estadoRegistro=1;
                codigoInspeccion = _creacion.Inspeccions.First().IdInsp;
                ObtenerIdDetalle(codigoInspeccion);
                _resultado = response.status;
                _mensaje = "Registro fue creado";
            }


            if (_resultado)
            {
                _snackBar.Add(_mensaje, Severity.Success, a => a.VisibleStateDuration = 500);

            }
            else
            {
                _snackBar.Add("Error al guardar cambios, al parecer hubo unos problemas al momento de grabar...", Severity.Error, a => a.VisibleStateDuration = 500);
               
            }
             disableButton = false;
            myImageClass = "d-none";
        }
        else
        {
            _snackBar.Add("Error al guardar cambios, autorizacion no validad...", Severity.Error, a => a.VisibleStateDuration = 500);                
        }


    }

    private async Task ObtenerIdDetalle(int codigoInspeccion)
    {

        List<InspeccionDetDTO> InspeccionDetsAnt = new List<InspeccionDetDTO>();

        var result = await _inspeccionServicio.ListaDetalles(codigoInspeccion,0, 1);

        if (result.status)
        {


            InspeccionDetsAnt = result.value!;

            var result3 = await _inspeccionServicio.ListaDetalles(codigoInspeccion, 0, 1);

            if (result3.status)
            {

                InspeccionDetsAnt = result3.value!;

                foreach (var data in InspeccionDetsAnt)
                {
                    foreach (var data2 in _inspeccion.InspeccionDets)
                    {
                        if (data2 != null)
                        {
                            if (data2.IdSubCtg == data.IdSubCtg)
                            {
                                 data2.IdInspDet = data.IdInspDet;
                                 data2.IdInsp = data.IdInsp;

                            }
                        }
                    }

                }

            }

            StateHasChanged();
        }
    }

    private void LimpiarDetalles()
    {
        foreach(var data in _inspeccion.InspeccionDets)
        {
            data.IdInspDet = 0;
        }
    }

    private void Mensaje(string _mensaje)
    {
        var parameters = new DialogParameters<MsMensaje>();
        parameters.Add(x => x.ContentText, _mensaje);
        parameters.Add(x => x.ButtonText, "Cerrar");
        parameters.Add(x => x.Color, MudBlazor.Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        _dialogService.Show<MsMensaje>("Delete", parameters, options);
    }


    private bool validarDatos()
    {
        if (_actaSeleccionado !=null)
        {
            if (_actaSeleccionado.IdActa>0)
            {
                if (_trabajadorSeleccionado !=null)
                {
                    if (listaAreas != null)
                    {
                        if (_tipoSeleccionado != null)
                        {
                            if (_tipoSeleccionado.IdTpoInsp>0)
                            {
                                return true;
                            }
                            else
                            {
                                Mensaje("1. Ingrese tipo de inspeccion...");
                                return false;
                            }
                        }
                        else
                        {
                            Mensaje("2. Ingrese tipo de inspeccion...");
                            return false;
                        }
                    }
                    else
                    {
                        Mensaje("3. Falta seleccionar el area...");
                        return false;
                    }
                }
                else
                {
                    Mensaje("5. Falta seleccionar el supervisor...");
                    return false;
                }
            }
            else
            {
                Mensaje("6. Falta la fecha del Acta...");
                return false;
            }
        }
        else
        {
            Mensaje("7. Falta la fecha del Acta...");
            return false;
        }
        
        
    }

    private async Task ImprimirPDF(int codigoInspeccion)
    {
        string rutaUrl = $"{appData.urlReporte}api/inspeccion/imprimirDetalle?codigoInspeccion={codigoInspeccion}";
        _jsServicio.InvokeAsync<object>("open", rutaUrl, "_blank");
    }

    int _idPlantillaDet = 0;
    //Editar Registro
    private void EditarRegistro(InspeccionDetDTO model, int activamosCamara)
    {
        _idPlantillaDet = model.IdInspDet;
     //   ActivarCamara(activamosCamara);

    }

}
