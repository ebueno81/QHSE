@inject ICategoriaService _categoriaServicio
@inject ISubCategoriaService _subcategoriaServicio
@inject IDialogService DialogService

@inject ISnackbar _snackBar

<MudDialog Style="width:900px">

    <DialogContent>
        <MudContainer Style="max-height: 600px; overflow-x:hidden;" Class="m-0 p-0">

            <EditForm Model="@_subcategoria">

                <MudGrid>

                    <MudItem xs="12" sm="12">
                        <MudAutocomplete T="CategoriaDTO" Label="Buscar categoria" @bind-Value="_categoriaSeleccionado" SearchFunc="@BuscarCategoria"
                                         ResetValueOnEmptyText="true"
                                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                                         Variant="Variant.Outlined" Margin="Margin.Dense"
                                         ToStringFunc="@(e => e == null ? null : $"{e.DescCtg}")" />
                    </MudItem>

                    <MudItem xs="12" sm="12">
                        <MudTextField @bind-Value="@_subcategoria.DescSubCtg" Class="mb-3"
                                      Label="SubCategoria" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Badge" />
                    </MudItem>

                </MudGrid>

            </EditForm>
        </MudContainer>
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="@(myImageClass + " my-7")" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="Cancel">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Disabled="@disableButton" Color="Color.Primary" OnClick="Guardar">Guardar</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Parameter]
    public SubCategoriaDTO _subcategoria { get; set; } = new SubCategoriaDTO();

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    CreacionDTO _creacion = new CreacionDTO()
        {
            SubCategoria = new List<SubCategoriaDTO>()
        };


    string myImageClass { get; set; } = "d-none";
    bool disableButton = false, desabilitaUser = false;

    //Categoria
    List<CategoriaDTO> listaCategorias = new List<CategoriaDTO>();
    private CategoriaDTO _categoriaSeleccionado;

    private async Task<IEnumerable<CategoriaDTO>> BuscarCategoria(string valor)
    {
        var response = await _categoriaServicio.Lista();

        if (response.status)
        {
            if (string.IsNullOrEmpty(valor))
                return new List<CategoriaDTO>();

            List<CategoriaDTO> lista = (List<CategoriaDTO>)response.value!;

            return lista.FindAll(p => p.DescCtg.Contains(valor, StringComparison.InvariantCultureIgnoreCase));

        }
        else
        {
            return new List<CategoriaDTO>();
        }

    }

    protected override async Task OnInitializedAsync()
    {
        var response = await _categoriaServicio.Lista();

        if (response.status)
        {

            listaCategorias = response.value!;
            if (_subcategoria.IdSubCtg != 0)
            {
                _categoriaSeleccionado = listaCategorias.FirstOrDefault(p => p.IdCtg == _subcategoria.IdCtg)!;

            }
            
        }
    }


    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Guardar()
    {
        if (validarDatos())
        {
            //if (validarDuplicidad())
            //{
            myImageClass = "d-block";
            disableButton = true;

            string _mensaje = "";
            bool _resultado;


            // _usuario.IdTpoUsua = tipoUsuarioSeleccionado.IdTpoUsua;
            // _usuario.IdTraba = _personaSeleccionado.IdTraba;

            _subcategoria.IdCtg = _categoriaSeleccionado.IdCtg;
            _creacion.SubCategoria!.Add(_subcategoria);


            if (_subcategoria.IdSubCtg != 0)
            {
                _creacion.IdCreate = _subcategoria.IdCreate ?? default(int);
                _creacion.PcModi = Environment.MachineName;
                _creacion.UsuaModi = appData.usuarioLogin;

                _resultado = await _subcategoriaServicio.Editar(_creacion);
                _mensaje = "Registro fue modificado";
            }
            else
            {
                _creacion.Activo = 1;
                _creacion.PcCrea = Environment.MachineName;
                _creacion.UsuaCrea = appData.usuarioLogin;

                var response = await _subcategoriaServicio.Crear(_creacion);
                _resultado = response.status;
                _mensaje = "Registro fue creado";
            }



            if (_resultado)
            {
                _snackBar.Add(_mensaje, Severity.Success, a => a.VisibleStateDuration = 500);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                _snackBar.Add("Error al guardar cambios, al parecer la sub categoria esta duplicado..", Severity.Error, a => a.VisibleStateDuration = 500);
                disableButton = false;
                myImageClass = "d-none";
            }

            //}
        }

    }

    private void Mensaje(string _mensaje)
    {
        var parameters = new DialogParameters<MsMensaje>();
        parameters.Add(x => x.ContentText, _mensaje);
        parameters.Add(x => x.ButtonText, "Cerrar");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogService.Show<MsMensaje>("Delete", parameters, options);
    }

    //validar que no se repite el area //
    private bool validarDuplicidad()
    {
        // if (_area.IdArea > 0)
        // {
        //     return true;
        // }
        // else
        // {
        //     AreaDTO areaValidateDTO = new AreaDTO();
        //     ResponseDTO<List<AreaDTO>> result = new ResponseDTO<List<AreaDTO>>();
        //     areaValidateDTO.DescArea = _area.DescArea;
        //       var result = _areaServicio.ValidarDuplicidad(areaValidateDTO);
        //     if (_areaServicio.ValidarDuplicidad(areaValidateDTO) != null)
        //     {

        //         if (_areaServicio.ValidarDuplicidad(userValidateDTO).Result.status == true)
        //         {
        //             _snackBar.Add("Usuario ya existe, se esta duplicando", Severity.Error, a => a.VisibleStateDuration = 500);
        //             return false;
        //         }
        //         else
        //         {
        //             return true;
        //         }

        //     }
        //     else
        //     {
        //         return true;
        //     }
        // }
        return true;

    }

    private bool validarDatos()
    {

        if (!string.IsNullOrEmpty(_subcategoria.DescSubCtg))
        {

            return true;
        }
        else
        {
            Mensaje("1. Ingrese descripción de la Sub Categoria...");
            return false;
        }


    }

}
